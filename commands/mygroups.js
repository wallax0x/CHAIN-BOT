const { OWNER_JID } = require('../config'); // Importa o JID do dono

module.exports = async (sock, m, jid, args, senderId) => { // 'senderId' ser√° passado pelo handleCommand
    try {
        // 1. Verifica se quem est√° usando o comando √© o dono do bot
        if (senderId !== OWNER_JID) {
            return sock.sendMessage(jid, { text: '‚ùå Apenas o dono do bot pode usar este comando.' }, { quoted: m });
        }

        await sock.sendMessage(jid, { text: 'üîé Obtendo lista de grupos, aguarde...' }, { quoted: m });

        // Obt√©m a lista de chats do bot
        const chats = await sock.groupFetchAllParticipating();
        const groups = Object.values(chats).filter(chat => chat.id.endsWith('@g.us')); // Filtra apenas grupos

        if (groups.length === 0) {
            return sock.sendMessage(jid, { text: '‚ö†Ô∏è Eu n√£o estou em nenhum grupo no momento.', quoted: m });
        }

        let groupListMessage = '*üìö Grupos que eu participo:*\n\n';
        groups.forEach(group => {
            groupListMessage += `*Nome:* ${group.subject}\n`;
            groupListMessage += `*ID:* ${group.id}\n`;
            groupListMessage += `*Membros:* ${group.participants.length}\n`;
            groupListMessage += `---------------------------\n`;
        });

        await sock.sendMessage(jid, { text: groupListMessage }, { quoted: m });

    } catch (e) {
        console.error('Erro no comando mygroups:', e);
        return sock.sendMessage(jid, { text: '‚ùå Ocorreu um erro ao obter a lista de grupos. Tente novamente mais tarde.', quoted: m });
    }
};