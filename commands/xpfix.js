// commands/xpfix.js

const { OWNER_JID } = require('../config');
const { getAllXpData, getXpNeededForLevel, writeXpData } = require('../utils/xp_manager');

module.exports = async (sock, m, jid) => {
    const reply = (text) => sock.sendMessage(jid, { text }, { quoted: m });

    // Comando restrito ao dono
    const sender = m.key.participant || m.key.remoteJid;
    if (sender !== OWNER_JID) {
        return reply('‚ùå Este comando √© restrito ao dono do bot.');
    }

    try {
        await sock.sendMessage(jid, { react: { text: 'üõ†Ô∏è', key: m.key } });
        await reply('Iniciando a corre√ß√£o da base de dados de XP. Isso pode levar um momento...');

        const allData = await getAllXpData();
        const userIds = Object.keys(allData);
        let usersCorrected = 0;

        for (const userId of userIds) {
            const user = allData[userId];
            let newLevel = 1;
            
            // Recalcula o n√≠vel correto baseado no XP total
            while (user.xp >= getXpNeededForLevel(newLevel + 1)) {
                newLevel++;
            }

            if (user.level !== newLevel) {
                user.level = newLevel;
                usersCorrected++;
            }
        }
        
        // Salva os dados corrigidos de volta no arquivo
        await writeXpData(allData);

        await sock.sendMessage(jid, { react: { text: '‚úÖ', key: m.key } });
        await reply(`*Corre√ß√£o Conclu√≠da!* ‚úÖ\n\n- *${userIds.length}* usu√°rios foram verificados.\n- *${usersCorrected}* usu√°rios tiveram seus n√≠veis corrigidos.`);

    } catch (e) {
        console.error("Erro no comando xpfix:", e);
        await reply('‚ùå Ocorreu um erro durante o processo de corre√ß√£o.');
    }
};