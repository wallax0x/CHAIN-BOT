// commands/debug.js (Vers√£o Completa e Formatada)

// Fun√ß√£o auxiliar para checar e formatar o status de cada vari√°vel
const checkVar = (name, variable) => {
    // Define o status inicial
    let status = (variable !== undefined && variable !== null);
    const type = typeof variable;
    let valuePreview = 'N/A';

    // Se a vari√°vel existe, fazemos checagens adicionais
    if (status) {
        if (type === 'string' && variable.length === 0) status = false; // String vazia √© um problema para chaves
        if (type === 'number' && variable === 0) status = false; // startTime como 0 √© um problema

        // Prepara uma pr√©via do valor para exibir
        if (type === 'object') {
            valuePreview = Array.isArray(variable) ? `Array[${variable.length}]` : 'Objeto';
        } else {
            valuePreview = String(variable).substring(0, 50); // Mostra os primeiros 50 caracteres
        }
    }

    const emoji = status ? '‚úÖ' : '‚ùå';
    const resultText = status ? `OK (Tipo: ${type})` : `ERRO (undefined/null/vazio)`;
    
    // Monta a linha do relat√≥rio
    return `${emoji} *${name}:* ${resultText}\n   ‚îî‚îÄ _Valor:_ \`${valuePreview}\``;
};

const command = async (sock, m, jid, configs, states) => {
    try {
        await sock.sendMessage(jid, { react: { text: 'ü©∫', key: m.key } });

        // Monta o relat√≥rio completo
        let report = 'ü©∫ *Relat√≥rio de Diagn√≥stico do Bot* ü©∫\n\n';
        report += 'Verificando as vari√°veis principais que passam entre os arquivos.\n\n';

        report += '*--- ‚öôÔ∏è Configura√ß√µes (`configs`) ---*\n';
        report += checkVar('PREFIX', configs.PREFIX) + '\n';
        report += checkVar('API_KEY (Bronxys)', configs.API_KEY) + '\n';
        report += checkVar('GEMINI_API_KEY', configs.GEMINI_API_KEY) + '\n';
        report += checkVar('GEMINI_MODEL_NAME', configs.GEMINI_MODEL_NAME) + '\n';
        report += checkVar('OWNER_JID', configs.OWNER_JID) + '\n\n';

        report += '*--- üîÑ Estados (`states`) ---*\n';
        report += checkVar('startTime', states.startTime) + '\n';
        report += checkVar('userStates', states.userStates) + '\n';
        report += checkVar('gameStates', states.gameStates) + '\n';
        report += checkVar('commandTimestamps', states.commandTimestamps) + '\n';
        
        // Envia o relat√≥rio para o dono no WhatsApp
        await sock.sendMessage(jid, { text: report.trim() });
        
    } catch (e) {
        console.error("Erro no comando debug:", e);
        await sock.sendMessage(jid, { text: '‚ùå Ocorreu um erro ao gerar o relat√≥rio de diagn√≥stico.' });
    }
};

module.exports = command;